#!/usr/bin/env python

import re
import os
import argparse as ap

p = ap.ArgumentParser(
    formatter_class=ap.RawDescriptionHelpFormatter,
    description=
"""
This script converts NTriples file into a large enumerated adjacency matrix.
Both predicates and subjects are enumerated and the mapping is saved.
This is used for evaluating rpq-matrix solution.

Output structure:
        - <output dir>/<output name>.dat is the graph itself.
        - <output dir>/<output name>.dat.SO is the subject/object mapping
        - <output dir>/<output name>.dat is the predicate mapping
""")
p.add_argument('input', help='Input N-Triples file')
p.add_argument('output', help='Output dir')
p.add_argument('name', help='Output name')
p.add_argument('-d', '--duplicate', action='store_true', help='Skip duplicates')

args = p.parse_args()

d = args.output
os.makedirs(d)
n = args.name

with open(args.input, 'r', errors='ignore') as f, open(f'{d}/{n}.dat.SO', 'w') as fv, open(f'{d}/{n}.dat.P', 'w') as fe, open(f'{d}/{n}.dat', 'w') as g:
    vs = {}
    ps = {}
    gs = [0]

    total = 0
    seen = set()
    i = 0
    j = 0
    for line in f:
        s = line.split(maxsplit=2)

        v1 = s[0]
        p = s[1]
        v2 = s[2][:-3]

        if v1 not in vs:
            i = i + 1
            vs[v1] = i

        if p not in ps:
            j = j + 1
            ps[p] = j

        if v2 not in vs:
            i = i + 1
            vs[v2] = i

        triple = (vs[v1], ps[p], vs[v2])
        if args.duplicate:
            if triple in seen:
                continue
            seen.add(triple)

        g.write(f"{triple[0]} {triple[1]} {triple[2]}\n")
        total += 1

    for key in vs:
        fv.write(f'{vs[key]} {key}\n')

    for key in ps:
        fe.write(f'{ps[key]} {key}\n')

    print(f"Successfully converted {args.input}")
    print(f"Triples: {total}, vertices: {i}, predicates: {j}")

    fv.close()
    fe.close()
    f.close()